/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three"
import React, { useContext, useEffect, useRef, useState } from "react"
import { useGLTF } from "@react-three/drei"
import { GLTF } from "three-stdlib"
import { Mesh } from "three"
import { ControllerContext } from "../components/ControllerContext"
import { degToRad } from "three/src/math/MathUtils"

type GLTFResult = GLTF & {
    nodes: {
        bottom: THREE.Mesh
        top: THREE.Mesh
    }
    materials: {}
}

export function Easy1(props: JSX.IntrinsicElements["group"]) {
    const bottom = useRef<Mesh>(null!)
    const controllerContext = useContext(ControllerContext)

    const [winReachableTime, setWinReachableTime] = useState<number | undefined>(undefined)

    useEffect(() => {
        const [alpha, beta, gamma] = controllerContext.orientation

        // Only runs when moving the phone... sad

        if (Math.abs(alpha - 90) < 5 && Math.abs(beta) < 5 && Math.abs(gamma) < 5) {
            if (winReachableTime === undefined) setWinReachableTime(Date.now())
            else if (Date.now() - winReachableTime > 3000) {
                console.log("YOU WIN!!")
            }
        } else {
            setWinReachableTime(undefined)
        }

        bottom.current.setRotationFromEuler(new THREE.Euler(0, 0, 0, "XYZ"))
        bottom.current.rotateY(degToRad(alpha))
        bottom.current.rotateZ(degToRad(beta))
        bottom.current.rotateX(degToRad(gamma))
    }, [controllerContext.orientation, winReachableTime])

    const { nodes, materials } = useGLTF("/Easy1.gltf") as unknown as GLTFResult
    return (
        <group {...props} dispose={null} position={[0, 0, -10]}>
            <mesh
                name="bottom"
                ref={bottom}
                castShadow
                receiveShadow
                position={[0, -3, 2]}
                geometry={nodes.bottom.geometry}
                material={nodes.bottom.material}
            >
                <meshStandardMaterial color="red" roughness={0.6} />
            </mesh>
            <mesh
                name="top"
                castShadow
                receiveShadow
                geometry={nodes.top.geometry}
                material={nodes.top.material}
                rotation={[0, Math.PI / 2, 0]}
                position={[0, 6, 2]}
            >
                <meshStandardMaterial color="blue" />
            </mesh>
        </group>
    )
}

useGLTF.preload("/Easy1.gltf")
