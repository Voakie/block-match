/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three"
import React, { useContext, useRef, useState } from "react"
import { useGLTF } from "@react-three/drei"
import { GLTF } from "three-stdlib"
import { Mesh } from "three"
import { useFrame } from "@react-three/fiber"
import { ControllerContext } from "../components/ControllerContext"

type GLTFResult = GLTF & {
    nodes: {
        bottom: THREE.Mesh
        top: THREE.Mesh
    }
    materials: {}
}

export function Easy1(props: JSX.IntrinsicElements["group"]) {
    const bottom = useRef<Mesh>(null!)
    const controllerContext = useContext(ControllerContext)
    const [cOX, cOY, cOZ] = controllerContext.orientation
    // useFrame((state, delta) => bottom.current.rotation.y += delta)

    const { nodes, materials } = useGLTF("/Easy1.gltf") as unknown as GLTFResult
    return (
        <group {...props} dispose={null} position={[0, 0, -10]}>
            <mesh
                name="bottom"
                ref={bottom}
                castShadow
                receiveShadow
                rotation={[cOX / 10, cOY / 10, cOZ / 10]}
                position={[0, 0, 2]}
                geometry={nodes.bottom.geometry}
                material={nodes.bottom.material}
            >
                <meshStandardMaterial color="red" roughness={0.6} />
            </mesh>
            <mesh
                name="top"
                castShadow
                receiveShadow
                geometry={nodes.top.geometry}
                material={nodes.top.material}
                rotation={[0, Math.PI / 2, 0]}
                position={[0, 7, 2]}
            >
                <meshStandardMaterial color="blue" />
            </mesh>
        </group>
    )
}

useGLTF.preload("/Easy1.gltf")
